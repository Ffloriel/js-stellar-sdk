{"code":"import axios from 'axios';\r\nimport toml from 'toml';\r\nimport { Config } from './config';\r\n// STELLAR_TOML_MAX_SIZE is the maximum size of stellar.toml file\r\nexport const STELLAR_TOML_MAX_SIZE = 100 * 1024;\r\n/**\r\n * StellarTomlResolver allows resolving `stellar.toml` files.\r\n */\r\nexport class StellarTomlResolver {\r\n    /**\r\n     * Returns a parsed `stellar.toml` file for a given domain.\r\n     * ```js\r\n     * StellarSdk.StellarTomlResolver.resolve('acme.com')\r\n     *   .then(stellarToml => {\r\n     *     // stellarToml in an object representing domain stellar.toml file.\r\n     *   })\r\n     *   .catch(error => {\r\n     *     // stellar.toml does not exist or is invalid\r\n     *   });\r\n     * ```\r\n     * @see <a href=\"https://www.stellar.org/developers/learn/concepts/stellar-toml.html\" target=\"_blank\">Stellar.toml doc</a>\r\n     * @param {string} domain Domain to get stellar.toml file for\r\n     * @param {object} [opts] Options object\r\n     * @param {boolean} [opts.allowHttp] - Allow connecting to http servers, default: `false`. This must be set to false in production deployments!\r\n     * @param {number} [opts.timeout] - Allow a timeout, default: 0. Allows user to avoid nasty lag due to TOML resolve issue.\r\n     * @returns {Promise} A `Promise` that resolves to the parsed stellar.toml object\r\n     */\r\n    static resolve(domain, opts = {}) {\r\n        let allowHttp = Config.isAllowHttp();\r\n        let timeout = Config.getTimeout();\r\n        if (typeof opts.allowHttp !== 'undefined') {\r\n            allowHttp = opts.allowHttp;\r\n        }\r\n        if (typeof opts.timeout === 'number') {\r\n            timeout = opts.timeout;\r\n        }\r\n        let protocol = 'https';\r\n        if (allowHttp) {\r\n            protocol = 'http';\r\n        }\r\n        return axios\r\n            .get(`${protocol}://${domain}/.well-known/stellar.toml`, {\r\n            maxContentLength: STELLAR_TOML_MAX_SIZE,\r\n            timeout\r\n        })\r\n            .then((response) => {\r\n            try {\r\n                const tomlObject = toml.parse(response.data);\r\n                return Promise.resolve(tomlObject);\r\n            }\r\n            catch (e) {\r\n                return Promise.reject(new Error(`Parsing error on line ${e.line}, column ${e.column}: ${e.message}`));\r\n            }\r\n        })\r\n            .catch((err) => {\r\n            if (err.message.match(/^maxContentLength size/)) {\r\n                throw new Error(`stellar.toml file exceeds allowed size of ${STELLAR_TOML_MAX_SIZE}`);\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n}\r\n","dts":{"name":"/Users/ffloriel/Documents/GitHub/js-stellar-sdk/src/stellar_toml_resolver.d.ts","writeByteOrderMark":false,"text":"export declare const STELLAR_TOML_MAX_SIZE: number;\r\n/**\r\n * StellarTomlResolver allows resolving `stellar.toml` files.\r\n */\r\nexport declare class StellarTomlResolver {\r\n    /**\r\n     * Returns a parsed `stellar.toml` file for a given domain.\r\n     * ```js\r\n     * StellarSdk.StellarTomlResolver.resolve('acme.com')\r\n     *   .then(stellarToml => {\r\n     *     // stellarToml in an object representing domain stellar.toml file.\r\n     *   })\r\n     *   .catch(error => {\r\n     *     // stellar.toml does not exist or is invalid\r\n     *   });\r\n     * ```\r\n     * @see <a href=\"https://www.stellar.org/developers/learn/concepts/stellar-toml.html\" target=\"_blank\">Stellar.toml doc</a>\r\n     * @param {string} domain Domain to get stellar.toml file for\r\n     * @param {object} [opts] Options object\r\n     * @param {boolean} [opts.allowHttp] - Allow connecting to http servers, default: `false`. This must be set to false in production deployments!\r\n     * @param {number} [opts.timeout] - Allow a timeout, default: 0. Allows user to avoid nasty lag due to TOML resolve issue.\r\n     * @returns {Promise} A `Promise` that resolves to the parsed stellar.toml object\r\n     */\r\n    static resolve(domain: any, opts?: {}): Promise<any>;\r\n}\r\n"}}
