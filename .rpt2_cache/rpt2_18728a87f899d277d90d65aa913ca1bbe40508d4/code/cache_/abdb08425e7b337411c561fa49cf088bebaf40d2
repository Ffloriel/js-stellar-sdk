{"code":"const defaultConfig = {\r\n    allowHttp: false,\r\n    timeout: 0\r\n};\r\nlet config = Object.assign({}, defaultConfig);\r\n/**\r\n * Global config class.\r\n *\r\n * Usage node:\r\n * ```\r\n * import {Config} from 'stellar-sdk';\r\n * Config.setAllowHttp(true);\r\n * Config.setTimeout(5000);\r\n * ```\r\n *\r\n * Usage browser:\r\n * ```\r\n * StellarSdk.Config.setAllowHttp(true);\r\n * StellarSdk.Config.setTimeout(5000);\r\n * ```\r\n * @static\r\n */\r\nclass Config {\r\n    /**\r\n     * Sets `allowHttp` flag globally. When set to `true`, connections to insecure http protocol servers will be allowed.\r\n     * Must be set to `false` in production. Default: `false`.\r\n     * @static\r\n     */\r\n    static setAllowHttp(value) {\r\n        config.allowHttp = value;\r\n    }\r\n    /**\r\n     * Sets `timeout` flag globally. When set to anything besides 0, the request will timeout after specified time (ms).\r\n     * Default: 0.\r\n     * @static\r\n     */\r\n    static setTimeout(value) {\r\n        config.timeout = value;\r\n    }\r\n    /**\r\n     * @static\r\n     * @returns {boolean} allowHttp flag\r\n     */\r\n    static isAllowHttp() {\r\n        return config.allowHttp;\r\n    }\r\n    static getTimeout() {\r\n        return config.timeout;\r\n    }\r\n    /**\r\n     * Sets all global config flags to default values.\r\n     */\r\n    static setDefault() {\r\n        config = Object.assign({}, defaultConfig);\r\n    }\r\n}\r\nexport { Config };\r\n","dts":{"name":"/Users/ffloriel/Documents/GitHub/js-stellar-sdk/src/config.d.ts","writeByteOrderMark":false,"text":"export declare type Configuration = {\r\n    allowHttp: boolean;\r\n    timeout: number;\r\n};\r\n/**\r\n * Global config class.\r\n *\r\n * Usage node:\r\n * ```\r\n * import {Config} from 'stellar-sdk';\r\n * Config.setAllowHttp(true);\r\n * Config.setTimeout(5000);\r\n * ```\r\n *\r\n * Usage browser:\r\n * ```\r\n * StellarSdk.Config.setAllowHttp(true);\r\n * StellarSdk.Config.setTimeout(5000);\r\n * ```\r\n * @static\r\n */\r\ndeclare class Config {\r\n    /**\r\n     * Sets `allowHttp` flag globally. When set to `true`, connections to insecure http protocol servers will be allowed.\r\n     * Must be set to `false` in production. Default: `false`.\r\n     * @static\r\n     */\r\n    static setAllowHttp(value: boolean): void;\r\n    /**\r\n     * Sets `timeout` flag globally. When set to anything besides 0, the request will timeout after specified time (ms).\r\n     * Default: 0.\r\n     * @static\r\n     */\r\n    static setTimeout(value: number): void;\r\n    /**\r\n     * @static\r\n     * @returns {boolean} allowHttp flag\r\n     */\r\n    static isAllowHttp(): boolean;\r\n    static getTimeout(): number;\r\n    /**\r\n     * Sets all global config flags to default values.\r\n     */\r\n    static setDefault(): void;\r\n}\r\nexport { Config };\r\n"}}
