{"code":"import axios from 'axios';\r\nimport URI from 'urijs';\r\nimport { version } from '../package.json';\r\n// keep a local map of server times\r\n// (export this purely for testing purposes)\r\nexport const SERVER_TIME_MAP = {\r\n/* each entry will map the server domain to the last-known time and the local\r\ntime it was recorded\r\nex:\r\n\n\"horizon-testnet.stellar.org\": {\r\n  serverTime: 1552513039,\r\n  localTimeRecorded: 1552513052\r\n}\r\n*/\r\n};\r\nconst HorizonAxiosClient = axios.create({\r\n    headers: {\r\n        'X-Client-Name': 'js-stellar-sdk',\r\n        'X-Client-Version': version\r\n    }\r\n});\r\nfunction _toSeconds(ms) {\r\n    return Math.floor(ms / 1000);\r\n}\r\nHorizonAxiosClient.interceptors.response.use((response) => {\r\n    const hostname = URI(response.config.url).hostname();\r\n    const serverTime = _toSeconds(Date.parse(response.headers.Date));\r\n    const localTimeRecorded = _toSeconds(new Date().getTime());\r\n    // eslint-disable-next-line no-restricted-globals\r\n    if (!isNaN(serverTime)) {\r\n        SERVER_TIME_MAP[hostname] = {\r\n            serverTime,\r\n            localTimeRecorded\r\n        };\r\n    }\r\n    return response;\r\n});\r\nexport default HorizonAxiosClient;\r\n/**\r\n * Given a hostname, get the current time of that server (i.e., use the last-\r\n * recorded server time and offset it by the time since then.) If there IS no\r\n * recorded server time, or it's been 5 minutes since the last, return null.\r\n * @param {string} hostname Hostname of a Horizon server.\r\n * @returns {number} The UNIX timestamp (in seconds, not milliseconds)\r\n * representing the current time on that server, or `null` if we don't have\r\n * a record of that time.\r\n */\r\nexport function getCurrentServerTime(hostname) {\r\n    const { serverTime, localTimeRecorded } = SERVER_TIME_MAP[hostname] || {};\r\n    if (!serverTime || !localTimeRecorded) {\r\n        return null;\r\n    }\r\n    const currentTime = _toSeconds(new Date().getTime());\r\n    // if it's been more than 5 minutes from the last time, then null it out\r\n    if (currentTime - localTimeRecorded > 60 * 5) {\r\n        return null;\r\n    }\r\n    return currentTime - localTimeRecorded + serverTime;\r\n}\r\n","dts":{"name":"/Users/ffloriel/Documents/GitHub/js-stellar-sdk/src/horizon_axios_client.d.ts","writeByteOrderMark":false,"text":"export declare const SERVER_TIME_MAP: {};\r\ndeclare const HorizonAxiosClient: import(\"axios\").AxiosInstance;\r\nexport default HorizonAxiosClient;\r\n/**\r\n * Given a hostname, get the current time of that server (i.e., use the last-\r\n * recorded server time and offset it by the time since then.) If there IS no\r\n * recorded server time, or it's been 5 minutes since the last, return null.\r\n * @param {string} hostname Hostname of a Horizon server.\r\n * @returns {number} The UNIX timestamp (in seconds, not milliseconds)\r\n * representing the current time on that server, or `null` if we don't have\r\n * a record of that time.\r\n */\r\nexport declare function getCurrentServerTime(hostname: any): any;\r\n"}}
